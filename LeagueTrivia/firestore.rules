rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isLeagueAdmin(leagueId) {
      return isSignedIn() && 
             get(/databases/$(database)/documents/leagues/$(leagueId)).data.adminId == request.auth.uid;
    }
    
    function isTeamCaptain(teamId) {
      return isSignedIn() && 
             get(/databases/$(database)/documents/teams/$(teamId)).data.captainId == request.auth.uid;
    }
    
    function isTeamMember(teamId) {
      return isSignedIn() && 
             exists(/databases/$(database)/documents/team_members/$(teamId)/members/$(request.auth.uid));
    }

    // League rules
    match /leagues/{leagueId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() 
                   && request.resource.data.name.size() >= 3 
                   && request.resource.data.name.size() <= 30
                   && request.resource.data.description.size() <= 200
                   && request.resource.data.adminId == request.auth.uid;
      allow update: if isLeagueAdmin(leagueId);
      allow delete: if isLeagueAdmin(leagueId);
    }

    // Team rules
    match /teams/{teamId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() 
                   && request.resource.data.name.size() >= 3 
                   && request.resource.data.name.size() <= 30
                   && request.resource.data.description.size() <= 200
                   && request.resource.data.memberCount <= 6
                   && request.resource.data.captainId == request.auth.uid;
      allow update: if isTeamCaptain(teamId);
      allow delete: if isTeamCaptain(teamId);
    }

    // Team members rules
    match /team_members/{teamId}/members/{userId} {
      allow read: if isSignedIn();
      allow write: if isTeamCaptain(teamId) || (isSignedIn() && userId == request.auth.uid);
    }

    // User rules
    match /users/{userId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn() && userId == request.auth.uid;
    }

    // User history rules
    match /user_history/{userId}/{historyId} {
      allow read: if isSignedIn() && userId == request.auth.uid;
      allow create: if isSignedIn() && userId == request.auth.uid;
      allow update: if false;  // History entries should never be updated
      allow delete: if false;  // History entries should never be deleted
    }
  }
} 